{"version":3,"sources":["logo.svg","autocomplete/autocomplete.js","App.js","reportWebVitals.js","index.js"],"names":["Autocomplete","props","useState","active","setActive","filtered","setFiltered","isShow","setIsShow","input","setInput","onClick","e","currentTarget","innerText","type","onChange","suggestions","value","newFilteredSuggestions","filter","suggestion","name","toLowerCase","indexOf","onKeyDown","keyCode","length","className","map","index","App","Data","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAAe,I,2BCoFAA,EAlFM,SAACC,GAAW,IAAD,EACFC,mBAAS,GADP,mBACvBC,EADuB,KACfC,EADe,OAEEF,mBAAS,IAFX,mBAEvBG,EAFuB,KAEbC,EAFa,OAGFJ,oBAAS,GAHP,mBAGvBK,EAHuB,KAGfC,EAHe,OAIJN,mBAAS,IAJL,mBAIvBO,EAJuB,KAIhBC,EAJgB,KAmBxBC,EAAU,SAAAC,GACdR,EAAU,GACVE,EAAY,IACZE,GAAU,GACVE,EAASE,EAAEC,cAAcC,YA8C3B,OACE,qCACE,uBACEC,KAAK,OACLC,SAnEW,SAAAJ,GAAM,IACbK,EAAgBhB,EAAhBgB,YACFR,EAAQG,EAAEC,cAAcK,MACxBC,EAAyBF,EAAYG,QACzC,SAAAC,GAAU,OACRA,EAAWC,KAAKC,cAAcC,QAAQf,EAAMc,gBAAkB,KAElEnB,EAAU,GACVE,EAAYa,GACZX,GAAU,GACVE,EAASE,EAAEC,cAAcK,QA0DrBO,UAhDY,SAAAb,GAChB,GAAkB,KAAdA,EAAEc,QACJtB,EAAU,GACVI,GAAU,GACVE,EAASL,EAASF,QAEf,IAAkB,KAAdS,EAAEc,QACT,OAAmB,IAAXvB,EAAgB,KAAOC,EAAUD,EAAS,GAE/C,GAAkB,KAAdS,EAAEc,QACT,OAAQvB,EAAS,IAAME,EAASsB,OAAU,KAAOvB,EAAUD,EAAS,KAuClEe,MAAOT,IAlCPF,GAAUE,EACRJ,EAASsB,OAET,oBAAIC,UAAU,eAAd,SACGvB,EAASwB,KAAI,SAACR,EAAYS,GACzB,IAAIF,EAIJ,OAHIE,IAAU3B,IACZyB,EAAY,UAGZ,oBAAIA,UAAWA,EAAuBjB,QAASA,EAA/C,SACGU,EAAWC,MADiBQ,QASrC,qBAAKF,UAAU,kBAAf,SACE,6CAKD,iC,OC/CIG,E,4JAZb,WACE,OACE,cAAC,IAAD,UACE,qBAAKH,UAAU,SAAf,SACE,cAAC,EAAD,CACEX,YAAae,Y,GANPC,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.67c8c1ac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\n\r\nconst Autocomplete = (props) => {\r\n  const [active, setActive] = useState(0);\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [isShow, setIsShow] = useState(false);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const onChange = e => {\r\n    const { suggestions } = props;\r\n    const input = e.currentTarget.value;\r\n    const newFilteredSuggestions = suggestions.filter(\r\n      suggestion =>\r\n        suggestion.name.toLowerCase().indexOf(input.toLowerCase()) > -1\r\n    );\r\n    setActive(0);\r\n    setFiltered(newFilteredSuggestions);\r\n    setIsShow(true);\r\n    setInput(e.currentTarget.value)\r\n  };\r\n\r\n  const onClick = e => {\r\n    setActive(0);\r\n    setFiltered([]);\r\n    setIsShow(false);\r\n    setInput(e.currentTarget.innerText)\r\n  };\r\n\r\n  const onKeyDown = e => {\r\n    if (e.keyCode === 13) { // enter key\r\n      setActive(0);\r\n      setIsShow(false);\r\n      setInput(filtered[active])\r\n    }\r\n    else if (e.keyCode === 38) { // up arrow\r\n      return (active === 0) ? null : setActive(active - 1);\r\n    }\r\n    else if (e.keyCode === 40) { // down arrow\r\n      return (active - 1 === filtered.length) ? null : setActive(active + 1);\r\n    }\r\n  };\r\n\r\n  const renderAutocomplete = () => {\r\n    if (isShow && input) {\r\n      if (filtered.length) {\r\n        return (\r\n          <ul className=\"autocomplete\">\r\n            {filtered.map((suggestion, index) => {\r\n              let className;\r\n              if (index === active) {\r\n                className = \"active\";\r\n              }\r\n              return (\r\n                <li className={className} key={index} onClick={onClick}>\r\n                  {suggestion.name}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        return (\r\n          <div className=\"no-autocomplete\">\r\n            <em>Not found</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"text\"\r\n        onChange={onChange}\r\n        onKeyDown={onKeyDown}\r\n        value={input}\r\n      />\r\n      {renderAutocomplete()}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Autocomplete;","import logo from './logo.svg';\nimport './App.css';\n\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport AutoComplete from './autocomplete/autocomplete';\nimport Data from './data.json';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"center\">\n          <AutoComplete\n            suggestions={Data}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}